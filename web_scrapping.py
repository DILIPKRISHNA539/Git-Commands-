# -*- coding: utf-8 -*-
"""Web Scrapping.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1pljvZefr7I8g4Y6x4sMusns53ZYMgNB5
"""

from bs4 import BeautifulSoup
import requests

url = 'https://en.wikipedia.org/wiki/Telangana_Legislative_Assembly'

page =requests.get(url)

soup = BeautifulSoup(page.text, 'html')

print(soup)

soup.find('table')

soup.find_all('table')[4]

soup.find('table', class_='sortable wikitable')

table = soup.find_all('table')[4]

print(table)

table = soup.find_all('table')[4]
th_titles = table.find_all('th')

th_titles

Assembly_table_titles=[title.text.strip() for title in th_titles]
print(Assembly_table_titles)

import pandas as pd

df = pd.DataFrame(columns=Assembly_table_titles)

df

column_data = table.find_all('tr')

for row in column_data[1:]:
    row_data = row.find_all('td')
    individual_row_data = [data.text.strip() for data in row_data]


    length=len(df)
    df.loc[length]=individual_row_data

for row in column_data[1:]:
    row_data = row.find_all('td')
    individual_row_data = [data.text.strip() for data in row_data]

    # Ensure the number of items in individual_row_data matches the number of columns in df
    # This handles cases where a row might have more or fewer columns than the header
    num_cols_df = len(df.columns)
    if len(individual_row_data) != num_cols_df:
        # Option 1: Slice the list to match the number of columns (assuming the extra is at the end)
        individual_row_data = individual_row_data[:num_cols_df]
        # Option 2: Handle rows with fewer columns by appending empty strings (if necessary)
        # while len(individual_row_data) < num_cols_df:
        #     individual_row_data.append('')
        # Option 3: Skip the row if the number of columns doesn't match exactly
        # continue


    length=len(df)
    df.loc[length]=individual_row_data

for row in column_data[1:]:
    row_data = row.find_all('td')
    individual_row_data = [data.text.strip() for data in row_data]

    # Ensure the number of items in individual_row_data matches the number of columns in df
    num_cols_df = len(df.columns)

    # Handle rows with fewer columns by appending empty strings
    while len(individual_row_data) < num_cols_df:
        individual_row_data.append('')

    # If a row has more columns than expected, slice the list (as you already have)
    if len(individual_row_data) > num_cols_df:
         individual_row_data = individual_row_data[:num_cols_df]

    length=len(df)
    df.loc[length]=individual_row_data

df

df.to_csv(r'C:\Users\DILIP KRISHNA\Desktop\Assemblydata.csv', index=False)

